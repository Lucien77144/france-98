/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from "three";
import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useScroll } from "@react-three/drei";
import { useFrame, useLoader } from "@react-three/fiber";
import Player from "./Player";

export default function Goal2({ actionBall, nodes }) {
  const group = useRef();
  const shooterAction = useRef(null);
  const goalAction = useRef(null);
  const passAction = useRef(null);
  const [durations, setDurations] = useState();

  const data = useScroll();

  const matcap = useLoader(
    THREE.TextureLoader,
    "/src/assets/img/spectator.png"
  );
  const material = new THREE.MeshMatcapMaterial({
    matcap,
    side: THREE.DoubleSide,
  });

  useEffect(() => {}, []);

  useFrame(() => {
    if (
      durations == null &&
      shooterAction.current &&
      goalAction.current &&
      passAction.current
    ) {
      const tmpDurations = [];
      actionBall["Ball2"].play().paused = true;

      shooterAction.current["HeadMid"].play().paused = true;
      goalAction.current["Idle"].play().paused = true;
      passAction.current["PassEnd"].play().paused = true;
      tmpDurations.push(actionBall["Ball2"].getClip().duration);
      tmpDurations.push(shooterAction.current["HeadMid"].getClip().duration);
      tmpDurations.push(goalAction.current["Idle"].getClip().duration);
      tmpDurations.push(passAction.current["PassEnd"].getClip().duration);
      setDurations([...tmpDurations]);
    }

    if (!data.visible(0.5, 0.24) && group.current.visible == true) {
      group.current.visible = false;
    } else if (data.visible(0.5, 0.24)) {
      if (group.current.visible == false) {
        group.current.visible = true;
      }

      if (durations !== null && durations.length > 0) {
        actionBall["Ball2"].time = data.range(0.5625, 0.1) * durations[0];
        shooterAction.current["HeadMid"].time =
          data.range(0.55, 0.1) * durations[1];
        goalAction.current["Idle"].time = data.range(0.55, 0.21) * durations[2];
        passAction.current["PassEnd"].time =
          data.range(0.52, 0.05) * durations[3];
      }
    }
  });

  return (
    <>
      <group ref={group} visible={true}>
        <Player
          action={shooterAction}
          material={material}
          config={{
            position: [
              0.030171401703648393, 0.021737948849145084, 0.42196341275908406,
            ],
            quaternion: [
              -0.00020651146707609507, 0.03426056772421883,
              -0.000007148268486364307, 0.9994129130650307,
            ],
          }}
        ></Player>

        <Player
          action={passAction}
          material={material}
          config={{
            position: [
              0.34833968707461166, 0.022411313123576398, 0.5541912763706206,
            ],
            quaternion: [
              -0.00006860547293714252, -0.8396497706177926,
              0.00010503844734484755, 0.5431282049035036,
            ],
          }}
        ></Player>

        <Player
          action={goalAction}
          material={material}
          config={{
            position: [
              0.013704211993233873, 0.02340946119414087, 0.5771249479191052,
            ],
            quaternion: [
              -0.000023572195028978736, 0.9968369989841002,
              -0.0002942505104826517, 0.07947270171173125,
            ],
          }}
        ></Player>

        <group name="but_2">
          <mesh
            name="Ball2"
            geometry={nodes.Ball2.geometry}
            material={nodes.Ball2.material}
            position={[0.057, 0.066, 0.37]}
            rotation={[-3.002, 0.533, 3.071]}
            scale={0.004}
          />
        </group>
      </group>
    </>
  );
}

useGLTF.preload("/src/assets/models/foot.glb");
