/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from "three";
import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useScroll } from "@react-three/drei";
import { useFrame, useLoader } from "@react-three/fiber";
import Player from "./Player";

export default function Goal2({ actionBall, nodes }) {
  const group = useRef();
  const shooterAction = useRef(null);
  const goalAction = useRef(null);
  const passAction = useRef(null);
  const [durations, setDurations] = useState();

  const data = useScroll();

  const matcap = useLoader(
    THREE.TextureLoader,
    "assets/img/spectator.png"
  );
  const material = new THREE.MeshMatcapMaterial({
    matcap,
    side: THREE.DoubleSide,
  });

  useEffect(() => {}, []);

  useFrame(() => {
    if (
      durations == null &&
      shooterAction.current &&
      goalAction.current &&
      passAction.current
    ) {
      const tmpDurations = [];
      actionBall["Ball2"].play().paused = true;

      shooterAction.current["HeadMid"].play().paused = true;
      goalAction.current["Idle"].play().paused = true;
      passAction.current["PassEnd"].play().paused = true;
      tmpDurations.push(actionBall["Ball2"].getClip().duration);
      tmpDurations.push(shooterAction.current["HeadMid"].getClip().duration);
      tmpDurations.push(goalAction.current["Idle"].getClip().duration);
      tmpDurations.push(passAction.current["PassEnd"].getClip().duration);
      setDurations([...tmpDurations]);
    }

    if (!data.visible(0.5, 0.24) && group.current.visible == true) {
      group.current.visible = false;
    } else if (data.visible(0.5, 0.24)) {
      if (group.current.visible == false) {
        group.current.visible = true;
      }

      if (durations !== null && durations.length > 0) {
        actionBall["Ball2"].time = data.range(0.5625, 0.1) * durations[0];
        shooterAction.current["HeadMid"].time =
          data.range(0.5, 0.3) * durations[1];
        goalAction.current["Idle"].time = data.range(0.55, 0.21) * durations[2];
        passAction.current["PassEnd"].time =
          data.range(0.47, 0.3) * durations[3];
      }
    }
  });

  return (
    <>
      <group ref={group} visible={true}>
        <Player
          action={shooterAction}
          material={material}
          config={{
            position: [
              0.012207295784845513, 0.019707431371618542, 0.5082846989534596,
            ],
            quaternion: [
              0.0008226945130503613, 0.16354789089186786,
              0.00013637099490046873, 0.9865350434533544,
            ],
          }}
          data={{
            firstName:"Zinedine",
            lastName:"Zidane",
            number:10,
            country:"france"
          }}
        ></Player>

        <Player
          action={passAction}
          material={material}
          config={{
            position: [
              0.4027638982386643, 0.02020194295441111, 0.6106654391898021,
            ],
            quaternion: [
              0.00009822609002911884, -0.7907824520418358,
              -0.00012928332186911125, 0.6120972857153997,
            ],
          }}
          data={{
            firstName:"Youri",
            lastName:"Djorkaeff",
            number:6,
            country:"france"
          }}
        ></Player>

        <Player
          action={goalAction}
          material={material}
          config={{
            position: [
              0.03035029876757274, 0.02172592871384313, 0.6378439365868653,
            ],
            quaternion: [
              0.000021720406879469335, 0.9986389596161027,
              -0.0004200891977532612, -0.052154111919941654,
            ],
          }}
          data={{
            firstName:"ClÃ¡udio",
            lastName:"Taffarel",
            number:1,
            country:"brazil"
          }}
        ></Player>

        <group name="but_2">
          <mesh
                  castShadow
            name="Ball2"
            geometry={nodes.Ball2.geometry}
            material={material}
            position={[0.057, 0.066, 0.37]}
            rotation={[-3.002, 0.533, 3.071]}
            scale={0.004}
          />
        </group>
      </group>
    </>
  );
}

useGLTF.preload("assets/models/foot.glb");
