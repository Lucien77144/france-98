/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from "three";
import React, { useEffect, useRef, useState } from "react";
import {
  useGLTF,
  useScroll,
} from "@react-three/drei";
import { useFrame, useLoader } from "@react-three/fiber";
import Player from "./Player";

export default function Goal({ actionBall, nodes }) {
  const group = useRef();

  const shooterAction = useRef(null);
  const goalAction = useRef(null);
  const passAction = useRef(null);
  const [durations,setDurations] = useState()

  const data = useScroll()


  const matcap = useLoader(
    THREE.TextureLoader,
    "/src/assets/img/spectator.png"
  );
  const material = new THREE.MeshMatcapMaterial({
    matcap,
    side: THREE.DoubleSide,
  });

  useEffect(() => {

  }, []);

  useFrame(() => {
    if(durations == null && shooterAction.current && goalAction.current && passAction.current ){
      const tmpDurations = [];
      actionBall["Ball1"].play().paused = true;
      shooterAction.current["HeadMid"].play().paused = true;
      goalAction.current["Jump"].play().paused = true
      passAction.current["PassEnd"].play().paused = true
      tmpDurations.push(actionBall["Ball1"].getClip().duration)
      tmpDurations.push(shooterAction.current["HeadMid"].getClip().duration)
      tmpDurations.push(goalAction.current["Jump"].getClip().duration)
      tmpDurations.push(passAction.current["PassEnd"].getClip().duration)
      setDurations([...tmpDurations])

    }

    if (!data.visible(0.225,.2) && group.current.visible == true) {
      group.current.visible = false;
      console.log("plop");
    }
    else if(data.visible(0.225,.2)){
      // console.log(durations)
      if (group.current.visible == false) {
        group.current.visible = true;
      }


      // console.log(shooterAction.current["HeadMid"]);
      if(durations !== null && durations.length > 0){
        actionBall["Ball1"].time = data.range(0.2825,.0325) * durations[0]
        shooterAction.current["HeadMid"].time = data.range(0.275,.035) * durations[1]
        goalAction.current["Jump"].time = data.range(0.3,.05) * durations[2]
        passAction.current["PassEnd"].time = data.range(0.275,.025)* durations[3]
      }

    }
  })

  return (
    <group ref={group} visible={true}>
      <Player
        action={shooterAction}
        material={material}
        config={{
          position: [
            0.019698898944176896, 0.02279062311173322, -0.41766064165061834,
          ],
          quaternion: [
            -0.000006127320748214293, 0.9989673873918792,
            -0.00012715471707428798, 0.04543283748102577,
          ],
        }}
      ></Player>

      <Player
        action={goalAction}
        material={material}
        config={{
          position: [
            -0.0010129076505260648, 0.023766828868151377, -0.6754274105910205
          ],
          quaternion: [
            0.001075945053371401, 0.00016294757303793414, 3.4886373808665403e-7, 0.9999994078949292
          ],
        }}
      ></Player>

        <Player
        action={passAction}
        material={material}
        config={{
          position: [
            0.34309945795599134, 0.025047184056460812, -0.6060086067149953
          ],
          quaternion: [
            -0.0006298213548330521, -0.5384612583475371, 0.00040267283986662245, 0.8426499358799192
          ],
        }}
        // pivot
      ></Player>

      <group name="but_1">
        <mesh
          name="Ball1"
          geometry={nodes.Ball1.geometry}
          material={material}
          position={[0.018, 0.065, -0.426]}
          rotation={[-0.116, -0.206, -0.024]}
          scale={0.003}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/src/assets/models/foot.glb");
