/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useHelper, PivotControls } from "@react-three/drei";
import { useControls } from "leva";

export default function SpotLight({ config, pivot = false }) {
  const group = useRef();
  const spotLight = useRef();
  const rotationRef = useRef();
  const positionRef = useRef();

  useHelper(spotLight.current,THREE.SpotLightHelper,1)
  

  const spotCtl = useControls("Spot Light", {
    intensity: { value: 1, min: 0, max: 30, step: 1 },
    penumbra: { value: 0, min: 0, max: 1, step: 0.01 },
    distance: { value: 0, min: 0, max: 100, step: 1 },
    decay: { value: 2, min: 0, max: 100, step: 1 },
    angle: { value: Math.PI / 2, min: 0, max: Math.PI * 2, step: 1 },
  });

  useEffect(() => {
    window.addEventListener("keydown", (event) => {
      if (event.keyCode === 69 && pivot) {
        // Le code 69 correspond Ã  la touche "E"
        console.log(positionRef.current, rotationRef.current);
      }
    });
  }, []);

  const groupRender = (
    <group ref={group} dispose={null} {...config}>
      {/* <spotLight
        ref={spotLight}
        {...spotCtl}
        castShadow={true}
        shadow-mapSize={[4096, 4096]}
      /> */}
      <pointLight
        castShadow
        shadow-mapSize={ [ 2048, 2048 ] }
      />
    </group>
  );

  return (
    <>
      {pivot ? (
        <PivotControls
          scale={0.1}
          onDrag={(l, dl, w, dw) => {
            const position = new THREE.Vector3();
            const rotation = new THREE.Quaternion();
            w.decompose(position, rotation, new THREE.Vector3());
            rotationRef.current = rotation.toArray();
            positionRef.current = position.toArray();
          }}
        >
          {groupRender}
        </PivotControls>
      ) : (
        <>{groupRender}</>
      )}
    </>
  );
}
